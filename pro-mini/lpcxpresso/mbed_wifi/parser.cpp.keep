#include "parser.h"

#include "protobuf.h"
#include "esp8266.h"
#include "debug.h"

///


namespace parser {

static uint32_t total_bytes_read = 0;

static bool readByte(uint8_t* b) {
  if (esp8266::rx_fifo.getByte(b)) {
    total_bytes_read++;
    return true;
  }
  return false;
}

//static int bytes_read;
namespace varint_parser {
static uint32_t bytes_parsed;
static uint64_t result;
static bool is_done;

static void reset() {
  bytes_parsed = 0;
  result = 0;
  is_done = false;
}

static bool parse() {
  // NOTE: This is not intended to be called after the first time it
  // returns true but we add this escape just in case.
  if (is_done) {
    return true;
  }

  // Varint64 can be encoded as at most 10 bytes (7 bits per byte)
  while (bytes_parsed < 10) {
    uint8_t b;
    if (!readByte(&b)) {
      return false;
    }
    result |= static_cast<uint64_t>(b & 0x7F) << (7 * bytes_parsed);
    bytes_parsed++;
    if (!(b & 0x80)) {
      is_done = true;
      debug.printf("varint: %08x %08x\n", static_cast<uint32_t>(result >> 32),
          static_cast<uint32_t>(result));
      return true;
    }
  }
  protobuf::protocolPanic("varint64 overrun");
  return false;
}

}  // namespace varing_parser

class TestListener: Listener {
public:
  virtual void onMessageEnter(uint8_t new_nesting_level, uint8_t tag_num) {
    debug.printf("onMsgEnter: %u, %u\n", new_nesting_level, tag_num);
  }

  virtual void onMessageExit(uint8_t new_nestingLevel) {
    debug.printf("onMsgExit: %u\n", new_nestingLevel);
  }

  virtual void onVarintField(uint8_t tag_num, uint64_t value) {
    debug.printf("onVarint: %u, %08x %08x\n", tag_num,
        static_cast<uint32_t>(value >> 32), static_cast<uint32_t>(value));
  }

  virtual bool isSubMessage(uint8_t tag_num, uint32_t length) {
    debug.printf("resolve: %u, %u\n", tag_num, length);
    return false;
  }

  // Called for variable length fields that were resolved as VAR_LEN_DATA.
  virtual void onDataFieldStart(uint8_t tag_num) {
    debug.printf("onDataStart: %u\n", tag_num);
  }
  virtual void onDataFieldByte(uint8_t tag_num, uint8_t byte_value) {
    debug.printf("onDataByte: %u\n", tag_num);
  }
  virtual void onDataFieldEnd(uint8_t tag_num) {
    debug.printf("onDataEnd: %u\n", tag_num);
  }
};

static TestListener test_listener;
static Listener* listener;

enum State {
  STATE_STOPED,  // 0
  STATE_PARSE_VERSION,  // 1
  STATE_PARSE_TOP_MSG_TAG,  // 2
  STATE_PARSE_TOP_MSG_LENGTH,  // 3
  STATE_TEST_IF_MSG_DONE,  // 4
  STATE_PARSE_FIELD_TAG,  // 5
  STATE_PARSE_VARINT_FIELD_VALUE,  // 6
//  STATE_PARSE_FIXED32_VALUE,  // 7
//  STATE_PARSE_FIXED64_VALUE,  // 8
  STATE_PARSE_FIELD_DATA_LENGTH,  // 9
  STATE_PARSE_VAR_LEN_DATA,  // 10
  //STATE_EVENT_READY,
};

static State state;

// Represents one messages in the message stack.
struct StackEntry {
  // For top level message (stack_size == 1), this the the message tag. For sub messages
  // (stack_size > 1), this is the field tag in the enclosing message.
  uint8_t message_tag_num;
  // Total message size. Used to determine the message end.
  uint32_t message_length;
  // The value of total_bytes_read before reading the first field. Used to
  // determine the end of the message.
  uint32_t start_total_bytes_read;
};

static const int kMaxStackSize = 4;
static StackEntry stack[kMaxStackSize];
// Stack size. 0 is idle, 1 is the top message, 2 is its sub message and so on.
// This is also the number of items in the stack.
static int stack_size;

static char stack_path[20];

// Encode the stack pass as a null terminated string with a '.' seperated list of message_tag_num
// in decimal format, starting with top level message. E.g. "3.2.11".
static void updateStackPath() {
  int i = 0;
  stack_path[0] = '\0';
  const int kBufferSize = sizeof(stack_path);
  for(int j = 0; j < stack_size; j++) {
    const uint8_t tag_num = stack[j].message_tag_num;
    i += snprintf(&stack_path[i], (kBufferSize - i), j? ".%u" : "%u", tag_num);
    // Check for buffer overflow.
    if (i >= kBufferSize - 1) {
      protobuf::protocolPanic("path ovf");
      return;
    }
  }
  debug.printf("PATH: [%s]\n", stack_path);
}

static uint8_t field_tag_num;
static uint8_t field_tag_type;

static uint32_t field_var_length;
static uint32_t field_var_bytes_read;

void setup() {
  state = STATE_STOPED;
  varint_parser::reset();
}

static void setState(State new_state) {
  debug.printf("parser %d -> %d\n", state, new_state);
  state = new_state;
  // NOTE: some state changes don't require varint parser reset but we do
  // it anyway for simplicity.
  varint_parser::reset();
}

void start() {
  setState(STATE_PARSE_VERSION);
  stack_size = 0;
  updateStackPath();
}

void stop() {
  setState(STATE_STOPED);
}

void loop() {
  switch (state) {
    case STATE_STOPED:
      break;

    case STATE_PARSE_VERSION:
      if (varint_parser::parse()) {
        setState(STATE_PARSE_TOP_MSG_TAG);
      }
      break;

    case STATE_PARSE_TOP_MSG_TAG:
      // TODO: assert that stack_size == 0 here.
      if (varint_parser::parse()) {
        // We use uintt_8 to represent tag nums.
        if (varint_parser::result > 0xff) {
          protobuf::protocolPanic("tag size");
          state = STATE_STOPED;
          return;
        }
        stack[0].message_tag_num = static_cast<uint8_t>(varint_parser::result);
        setState(STATE_PARSE_TOP_MSG_LENGTH);
      }
      break;

    case STATE_PARSE_TOP_MSG_LENGTH:
      // TODO: assert that stack_size is 0 here.
      if (varint_parser::parse()) {
        // NOTE: message_tag_num was written in the previous state STATE_PARSE_TOP_MSG_TAG.
        stack[0].message_length = static_cast<uint32_t>(varint_parser::result);
        stack[0].start_total_bytes_read = total_bytes_read;
        // This pushes the top level message (first in the stack).
        stack_size = 1;
        updateStackPath();
        debug.printf("\n***PUSH -> %d\n", stack_size);
        setState(STATE_TEST_IF_MSG_DONE);
      }
      break;

    case STATE_TEST_IF_MSG_DONE: {
      const StackEntry* const stack_top = &stack[stack_size - 1];
      const uint32_t bytes_so_far = total_bytes_read
          - stack_top->start_total_bytes_read;
      debug.printf("\nMsg bytes: %u/%u (level=%d)\n", bytes_so_far, stack_top->message_length, stack_size);
      //  TODO: if it's actually > than protcol panic. Should match exactly.
      if (bytes_so_far >= stack_top->message_length) {
        stack_size--;
        debug.printf("\n*** POP -> %d\n", stack_size);
        // In pop the path is shorten so we don't worry about the length.
        updateStackPath();
        if (stack_size == 0) {
          // Done parsing top level message.
          setState(STATE_PARSE_TOP_MSG_TAG);
        }
      } else {
        // Continue pasring fields of this message.
        setState(STATE_PARSE_FIELD_TAG);
      }
    }
      break;

    case STATE_PARSE_FIELD_TAG:
      if (varint_parser::parse()) {
        // TODO: panic if tag num doesn't fit in field_tag_num.
        field_tag_num = static_cast<uint8_t>(varint_parser::result >> 3);
        field_tag_type = static_cast<uint8_t>(varint_parser::result) & 0x7;
        debug.printf("TAG: [%s].%u, type=%d\n", stack_path, field_tag_num, field_tag_type);
        // Dispatch by field tag type
        if (field_tag_type == protobuf::kTagTypeVarint) {
          setState(STATE_PARSE_VARINT_FIELD_VALUE);
        } else if (field_tag_type == protobuf::kTagTypeLenDelimited) {
          setState(STATE_PARSE_FIELD_DATA_LENGTH);
        } else {
          protobuf::protocolPanic("parser tag type");
          setState(STATE_STOPED);
        }
      }
      break;

    case STATE_PARSE_VARINT_FIELD_VALUE:
      if (varint_parser::parse()) {
        debug.printf("VARINT FIELD DONE [%s].%u\n", stack_path, field_tag_num);
        setState(STATE_TEST_IF_MSG_DONE);
      }
      break;


    case STATE_PARSE_FIELD_DATA_LENGTH:
      if (varint_parser::parse()) {
        field_var_length = static_cast<uint32_t>(varint_parser::result);

        // TODO: ask listener for policy. For now faking it.

        bool is_sub_message = false;
//        if (stack_size == 1 &&
//            stack[0].message_tag_num == 3 &&  // LoginResponse
//            field_tag_num == 3) {             // LoginResponse.ErrorInfo
//          debug.printf("\nEntering LoginResponse.ErrorInfo sub message [%s].%u\n", stack_path, field_tag_num);
//          is_sub_message = true;
//        }
//        if (stack_size == 2 &&
//            stack[0].message_tag_num == 3 &&  // LoginResponse
//            stack[1].message_tag_num == 3 &&  // LoginResponse.ErrorInfo
//            field_tag_num == 4) {             // LoginResponse.ErrorInfo.Extension
//          debug.printf("\nEntering LoginResponse.ErrorInfo.Extension sub message [%s].%u\n", stack_path, field_tag_num);
//          is_sub_message = true;
//        }

        if (strcmp("3", stack_path) == 0 && field_tag_num == 3) {
            is_sub_message = true;
            debug.printf("Entering LoginResponse.ErrorInfo\n");
        } else  if (strcmp("3.3", stack_path) == 0 && field_tag_num == 4) {
          is_sub_message = true;
          debug.printf("Entering LoginResponse.ErrorInfo.Extension sub message\n");
        }


        if (is_sub_message) {
          stack_size++;
          if (stack_size > kMaxStackSize) {
            // TODO: make this a common method to set panic and stop
            protobuf::protocolPanic("parser stack");
            setState(STATE_STOPED);
            return;
          }
          debug.printf("\n***PUSH -> %d\n", stack_size);
          StackEntry* const stack_top = &stack[stack_size-1];
          stack_top->message_length = field_var_length;
          stack_top->message_tag_num = field_tag_num;
          stack_top->start_total_bytes_read = total_bytes_read;
          // Raised panic if buffer overflow.
          updateStackPath();
          setState(STATE_TEST_IF_MSG_DONE);
        } else {
          setState(STATE_PARSE_VAR_LEN_DATA);
          field_var_bytes_read = 0;
        }

        //FieldPolicy policy =  VAR_LEN_SKIP;
        //setState(STATE_PARSE_VAR_LEN_DATA);
        //field_var_bytes_read = 0;
      }
      break;

    case STATE_PARSE_VAR_LEN_DATA:
      while (field_var_bytes_read < field_var_length) {
        uint8_t b;
        if (!readByte(&b)) {
          return;
        }

        debug.printf("data %u/%u: ", field_var_bytes_read, field_var_length);
        // TODO: make this a common util function.
        if (b == '\r') {
          debug.puts("{CR}");
        } else if (b == '\n') {
          debug.puts("{LF}");
        } else if (b > ' ' && b <= '~') {
          debug.printf("{%c}", b);
        } else {
          debug.printf("{%02x}", b);
        }
        debug.puts("\n");

        field_var_bytes_read++;
      }
      debug.printf("VAR LEN FIELD DONE [%s].%u, len=%u\n", stack_path, field_tag_num, field_var_bytes_read);
      setState(STATE_TEST_IF_MSG_DONE);
      break;

    default:
      protobuf::protocolPanic("parser state");
  }
}

}  // parser
